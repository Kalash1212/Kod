import numpy as np
import math

print("Функция: y = e^(x^2)")
n = int(input("Введите количество узлов: "))
A = np.zeros((2, n+1), dtype=np.float64)
for j in range(n+1):
    A[0][j] = float(input("Введите x: "))
for j in range(n+1):
    A[1][j] = np.exp(A[0][j] * A[0][j])
print(A,'\n')
h=A[0][1]-A[0][0]

S = np.zeros((n, 4), dtype=np.float64)
#Заполняем a
for i in range(n):
    S[i][0]=A[1][i]
S[0][2]=0

B = np.zeros((3, 4), dtype=np.float64)
for j in range(3):
    B[j][0]=h
    B[j][2]=h
for j in range(3):
    B[j][1]=4*h
for j in range(3):
    B[j][3]=3*((A[1][j+2]-A[1][j+1])/h-(A[1][j+1]-A[1][j])/h)
B[0][0]=0
B[2][2]=0
print(B,'\n')

#Прогонка для того что бы посчитать c
#Ниже поэтапно будет составлена таблица, в левом столбце которой написаны значения P = -c(i)/(a(i)*P(i-1)+b), а в правом значения Q = (d(i)-a(i)*Q(i-1))/(a(i)*P(i-1)+b).")
#При этом P(1) = -c(1)/b(1) и Q(1) = d(1)/b(1)
D = np.zeros((3, 2), dtype=np.float64)
D[0][0] = -B[0][2] / B[0][1]
for i in range(1, 3):
    D[i][0] = -B[i][2] / (B[i][0] * D[i - 1][0] + B[i][1])
    print(D)
D[0][1] = B[0][3] / B[0][1]
for i in range(1, 3):
    D[i][1] = (B[i][3] - B[i][0] * D[i - 1][1]) / (B[i][0] * D[i - 1][0] + B[i][1])
#Ниже поэтапно будут посчитаны значения Х = P(i)*X(i+1)+Q в виде матрицы
C = np.zeros((3, 1), dtype=np.float64)
C[2][0] = B[2][1]
print(C,'\n')
for i in range(1, -1, -1):
    C[i][0] = D[i][0] * C[i + 1][0] + D[i][1]
print('c( 1 ) = 0' )
for i in range(3):
    print("c(", i + 2, ") =", round(C[i][0], 2))
for i in range (3):
    S[i+1][2]=C[i][0]
print(S,'\n')

#Считаем b
for i in range (n-1):
    S[i][1]=(A[1][i+1]-A[1][i])/h-(h/3)*(S[i+1][2]+2*S[i][2])
S[3][1]=(A[1][4]-A[1][3])/h-(2*h/3)*S[3][2]
print(S,'\n')

#Считаем d
for i in range (n-1):
    S[i][3]=(S[i+1][2]-S[i][2])/3*h
S[3][3]= -S[3][2]/3*h
print(S,'\n')

#Выводим сплайны
Q = np.zeros((n, 4), dtype=np.float64)
for i in range(n):
    Q[i][0]=S[i][0]-S[i][1]*A[0][i]+S[i][2]*(A[0][i]**2)-S[i][3]*(A[0][i]**3)
    Q[i][1]=S[i][1]-2*S[i][2]*A[0][i]+S[i][3]*3*(A[0][i]**2)
    Q[i][2]=S[i][2]-3*S[i][3]*A[0][i]
    Q[i][3]=S[i][3]
    
    if Q[i][2]>0 and Q[i][1]>0 and Q[i][0]>0:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3+',round(Q[i][2],2),'*X^2+',round(Q[i][1],2),'*X+',round(Q[i][0],2),sep='')

    elif Q[i][2]>0 and Q[i][1]>0 and Q[i][0]<0:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3+',round(Q[i][2],2),'*X^2+',round(Q[i][1],2),'*X',round(Q[i][0],2),sep='')

    elif Q[i][2]>0 and Q[i][1]<0 and Q[i][0]>0:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3+',round(Q[i][2],2),'*X^2',round(Q[i][1],2),'*X+',round(Q[i][0],2),sep='')

    elif Q[i][2]>0 and Q[i][1]<0 and Q[i][0]<0:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3+',round(Q[i][2],2),'*X^2',round(Q[i][1],2),'*X',round(Q[i][0],2),sep='')

    elif Q[i][2]<0 and Q[i][1]>0 and Q[i][0]>0:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3',round(Q[i][2],2),'*X^2+',round(Q[i][1],2),'*X+',round(Q[i][0],2),sep='')

    elif Q[i][2]<0 and Q[i][1]>0 and Q[i][0]<0:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3',round(Q[i][2],2),'*X^2+',round(Q[i][1],2),'*X',round(Q[i][0],2),sep='')

    elif Q[i][2]<0 and Q[i][1]<0 and Q[i][0]<0:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3',round(Q[i][2],2),'*X^2',round(Q[i][1],2),'*X',round(Q[i][0],2),sep='')

    elif Q[i][2]<0 and Q[i][1]<0 and Q[i][0]>0:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3',round(Q[i][2],2),'*X^2',round(Q[i][1],2),'*X+',round(Q[i][0],2),sep='')
    else:
        print(i+1,'кубический сплайн будет выглядеть так: ', end='')
        print('S',i+1,'=',round(Q[i][3],2), '*X^3',round(Q[i][2],2),'*X^2',round(Q[i][1],2),'*X+',round(Q[i][0],2))
